/* The following code was generated by JFlex 1.4.1 on 4/10/09 1:20 */

//
// Culebra Programming language
//
package culebra.lexical;

import culebra.syntax.*;
import culebra.lexical.Token;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.1
 * on 4/10/09 1:20 from the specification file
 * <tt>D:/Projects/culebra/flexcup/culebra.flex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int STRING = 2;
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 1;

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     7,  7,  7,  7,  7,  7,  7,  7,  7,  3,  1,  0,  3,  2,  7,  7, 
     7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  7,  0,  0,  0,  0, 
     3, 43, 49, 27,  6,  0, 39,  0, 15, 16,  9, 45, 36, 46, 48,  8, 
     4,  5,  5,  5,  5,  5,  5,  5,  5,  5, 38, 37, 40, 42, 41,  0, 
    47,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6, 
     6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  6,  0, 50,  0,  0,  6, 
     0, 26, 29, 25, 23, 24, 10, 33, 14, 17,  6, 30, 11, 18, 28, 20, 
    19,  6, 21, 13, 22, 12, 32, 31,  6,  6,  6, 34, 44, 35,  0,  7
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\2\2\1\3\2\4\1\5\1\6\1\7"+
    "\2\5\1\10\1\11\10\5\1\1\3\5\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\1\1\24\1\21\1\25\1\26\1\27\4\30\1\31"+
    "\1\32\1\33\1\31\1\34\1\35\1\36\1\37\4\5"+
    "\1\40\13\5\1\0\4\5\1\41\1\42\1\43\1\44"+
    "\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54"+
    "\1\55\1\56\1\57\2\5\1\60\3\5\1\61\4\5"+
    "\1\62\5\5\1\0\3\5\1\63\11\5\1\64\1\5"+
    "\1\65\1\66\1\5\1\67\1\0\2\5\1\70\1\5"+
    "\1\71\5\5\1\72\3\5\1\0\1\73\1\74\1\0"+
    "\1\75\1\76\1\77\1\100\1\101\1\5\1\102\2\5"+
    "\1\0\1\103\1\104\1\105\1\5\1\106\1\107";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\231\0\231\0\314\0\231\0\377"+
    "\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe\0\u0231\0\231\0\231"+
    "\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396\0\u03c9"+
    "\0\u03fc\0\u042f\0\u0462\0\u0495\0\231\0\231\0\231\0\231"+
    "\0\231\0\u04c8\0\231\0\231\0\u04fb\0\u052e\0\u0561\0\u0594"+
    "\0\u05c7\0\231\0\231\0\231\0\231\0\u05fa\0\u062d\0\u0660"+
    "\0\231\0\231\0\231\0\u0693\0\377\0\u06c6\0\231\0\231"+
    "\0\u06f9\0\u072c\0\u075f\0\u0792\0\u0165\0\u07c5\0\u07f8\0\u082b"+
    "\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\u095d\0\u0990\0\u09c3"+
    "\0\u09f6\0\u0a29\0\u0a5c\0\u0a8f\0\u0ac2\0\231\0\231\0\231"+
    "\0\231\0\231\0\231\0\231\0\231\0\231\0\231\0\231"+
    "\0\231\0\231\0\231\0\231\0\u0af5\0\u0b28\0\u0165\0\u0b5b"+
    "\0\u0b8e\0\u0bc1\0\u0165\0\u0bf4\0\u0c27\0\u0c5a\0\u0c8d\0\u0165"+
    "\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf\0\u0df2\0\u0e25"+
    "\0\u0e58\0\u0165\0\u0e8b\0\u0ebe\0\u0ef1\0\u0f24\0\u0f57\0\u0f8a"+
    "\0\u0fbd\0\u0ff0\0\u1023\0\u0165\0\u1056\0\u0165\0\u0165\0\u1089"+
    "\0\u0165\0\u10bc\0\u10ef\0\u1122\0\u0165\0\u1155\0\u0165\0\u1188"+
    "\0\u11bb\0\u11ee\0\u1221\0\u1254\0\u1287\0\u12ba\0\u12ed\0\u1320"+
    "\0\u1353\0\u0165\0\u0165\0\u1386\0\u0165\0\u0165\0\u0165\0\u0165"+
    "\0\u0165\0\u13b9\0\u0165\0\u13ec\0\u141f\0\u1452\0\231\0\u0165"+
    "\0\u0165\0\u1485\0\231\0\u0165";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\4"+
    "\1\13\1\14\1\15\2\12\1\16\1\12\1\17\1\20"+
    "\1\21\1\22\1\23\1\12\1\24\1\25\1\26\1\27"+
    "\1\30\1\12\1\31\1\12\1\32\1\12\1\33\1\34"+
    "\1\12\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\4\2\55\1\56\5\55\1\57\1\60\51\55"+
    "\1\61\2\62\56\61\1\63\1\64\64\0\1\5\65\0"+
    "\2\65\1\66\3\0\5\66\2\0\12\66\1\0\6\66"+
    "\25\0\2\11\1\66\3\0\5\66\2\0\12\66\1\0"+
    "\6\66\25\0\4\12\2\0\5\12\2\0\12\12\1\0"+
    "\6\12\32\0\1\67\61\0\1\70\56\0\4\12\2\0"+
    "\1\12\1\71\3\12\2\0\3\12\1\72\6\12\1\0"+
    "\6\12\25\0\4\12\2\0\5\12\2\0\5\12\1\73"+
    "\4\12\1\0\3\12\1\74\2\12\25\0\4\12\2\0"+
    "\1\75\4\12\2\0\1\12\1\76\10\12\1\0\1\77"+
    "\5\12\25\0\4\12\2\0\5\12\2\0\3\12\1\100"+
    "\6\12\1\0\6\12\25\0\4\12\2\0\5\12\2\0"+
    "\4\12\1\101\5\12\1\0\6\12\25\0\4\12\2\0"+
    "\5\12\2\0\7\12\1\102\2\12\1\0\6\12\25\0"+
    "\4\12\2\0\5\12\2\0\1\12\1\103\10\12\1\0"+
    "\6\12\25\0\4\12\2\0\5\12\2\0\7\12\1\104"+
    "\2\12\1\0\6\12\25\0\4\12\2\0\1\12\1\105"+
    "\3\12\2\0\12\12\1\0\1\106\5\12\25\0\4\12"+
    "\2\0\5\12\2\0\3\12\1\107\5\12\1\110\1\0"+
    "\6\12\50\0\1\111\37\0\4\12\2\0\5\12\2\0"+
    "\4\12\1\112\5\12\1\0\6\12\25\0\4\12\2\0"+
    "\4\12\1\113\2\0\12\12\1\0\6\12\25\0\4\12"+
    "\2\0\5\12\2\0\3\12\1\114\5\12\1\115\1\0"+
    "\6\12\70\0\1\116\65\0\1\117\62\0\1\120\64\0"+
    "\1\121\60\0\1\122\2\0\1\123\57\0\1\124\3\0"+
    "\1\125\5\0\1\55\72\0\1\126\61\0\1\127\77\0"+
    "\1\130\1\131\5\0\1\132\24\0\1\133\1\134\4\0"+
    "\4\66\2\0\5\66\2\0\12\66\1\0\6\66\25\0"+
    "\4\12\2\0\2\12\1\135\2\12\2\0\3\12\1\136"+
    "\6\12\1\0\6\12\25\0\4\12\2\0\5\12\2\0"+
    "\4\12\1\137\5\12\1\0\6\12\25\0\4\12\2\0"+
    "\5\12\2\0\4\12\1\140\5\12\1\0\6\12\25\0"+
    "\4\12\2\0\5\12\2\0\1\141\11\12\1\0\6\12"+
    "\25\0\4\12\2\0\5\12\2\0\2\12\1\142\7\12"+
    "\1\0\6\12\25\0\4\12\2\0\5\12\2\0\5\12"+
    "\1\143\4\12\1\0\6\12\25\0\4\12\2\0\5\12"+
    "\2\0\6\12\1\144\3\12\1\0\6\12\25\0\4\12"+
    "\2\0\5\12\2\0\1\145\11\12\1\0\6\12\25\0"+
    "\4\12\2\0\5\12\2\0\5\12\1\146\3\12\1\147"+
    "\1\0\6\12\25\0\4\12\2\0\5\12\2\0\2\12"+
    "\1\150\7\12\1\0\6\12\25\0\4\12\2\0\1\151"+
    "\4\12\2\0\12\12\1\0\6\12\25\0\4\12\2\0"+
    "\3\12\1\152\1\12\2\0\12\12\1\0\6\12\25\0"+
    "\4\12\2\0\2\12\1\153\2\12\2\0\12\12\1\0"+
    "\6\12\25\0\4\12\2\0\5\12\2\0\12\12\1\0"+
    "\1\154\5\12\25\0\4\12\2\0\3\12\1\155\1\12"+
    "\2\0\12\12\1\0\6\12\51\0\1\156\36\0\4\12"+
    "\2\0\5\12\2\0\7\12\1\157\2\12\1\0\6\12"+
    "\25\0\4\12\2\0\5\12\2\0\1\160\11\12\1\0"+
    "\6\12\25\0\4\12\2\0\5\12\2\0\1\161\11\12"+
    "\1\0\6\12\25\0\4\12\2\0\5\12\2\0\4\12"+
    "\1\162\5\12\1\0\6\12\25\0\4\12\2\0\3\12"+
    "\1\163\1\12\2\0\12\12\1\0\6\12\25\0\4\12"+
    "\2\0\5\12\2\0\11\12\1\164\1\0\6\12\25\0"+
    "\4\12\2\0\2\12\1\165\2\12\2\0\1\166\11\12"+
    "\1\0\6\12\25\0\4\12\2\0\5\12\2\0\5\12"+
    "\1\167\4\12\1\0\6\12\25\0\4\12\2\0\5\12"+
    "\2\0\3\12\1\170\6\12\1\0\6\12\25\0\4\12"+
    "\2\0\2\12\1\171\2\12\2\0\12\12\1\0\6\12"+
    "\25\0\4\12\2\0\5\12\2\0\12\12\1\0\1\172"+
    "\5\12\25\0\4\12\2\0\2\12\1\173\2\12\2\0"+
    "\12\12\1\0\6\12\25\0\4\12\2\0\5\12\2\0"+
    "\6\12\1\174\3\12\1\0\6\12\25\0\4\12\2\0"+
    "\5\12\2\0\11\12\1\175\1\0\6\12\25\0\4\12"+
    "\2\0\5\12\2\0\7\12\1\176\2\12\1\0\6\12"+
    "\25\0\4\12\2\0\5\12\2\0\1\12\1\177\10\12"+
    "\1\0\6\12\25\0\4\12\2\0\5\12\2\0\5\12"+
    "\1\200\4\12\1\0\6\12\25\0\4\12\2\0\5\12"+
    "\2\0\7\12\1\201\2\12\1\0\6\12\33\0\1\202"+
    "\54\0\4\12\2\0\5\12\2\0\11\12\1\203\1\0"+
    "\6\12\25\0\4\12\2\0\1\12\1\204\3\12\2\0"+
    "\12\12\1\0\6\12\25\0\4\12\2\0\5\12\2\0"+
    "\6\12\1\205\3\12\1\0\6\12\25\0\4\12\2\0"+
    "\4\12\1\206\2\0\12\12\1\0\6\12\25\0\4\12"+
    "\2\0\5\12\2\0\5\12\1\207\4\12\1\0\6\12"+
    "\25\0\4\12\2\0\5\12\2\0\10\12\1\210\1\12"+
    "\1\0\6\12\25\0\4\12\2\0\5\12\2\0\12\12"+
    "\1\0\1\211\5\12\25\0\4\12\2\0\5\12\2\0"+
    "\10\12\1\212\1\12\1\0\6\12\25\0\4\12\2\0"+
    "\5\12\2\0\4\12\1\213\5\12\1\0\6\12\25\0"+
    "\4\12\2\0\1\12\1\214\3\12\2\0\12\12\1\0"+
    "\6\12\25\0\4\12\2\0\5\12\2\0\5\12\1\215"+
    "\4\12\1\0\6\12\25\0\4\12\2\0\5\12\2\0"+
    "\4\12\1\216\5\12\1\0\6\12\25\0\4\12\2\0"+
    "\2\12\1\217\2\12\2\0\12\12\1\0\6\12\25\0"+
    "\4\12\2\0\5\12\2\0\1\220\11\12\1\0\6\12"+
    "\42\0\1\221\45\0\4\12\2\0\5\12\2\0\12\12"+
    "\1\0\2\12\1\222\3\12\25\0\4\12\2\0\5\12"+
    "\2\0\7\12\1\223\2\12\1\0\6\12\25\0\4\12"+
    "\2\0\5\12\1\224\1\0\12\12\1\0\6\12\25\0"+
    "\4\12\2\0\5\12\2\0\5\12\1\225\4\12\1\0"+
    "\6\12\25\0\4\12\2\0\5\12\2\0\12\12\1\0"+
    "\5\12\1\226\25\0\4\12\2\0\4\12\1\227\2\0"+
    "\12\12\1\0\6\12\25\0\4\12\2\0\5\12\2\0"+
    "\5\12\1\230\4\12\1\0\6\12\25\0\4\12\2\0"+
    "\5\12\2\0\7\12\1\231\2\12\1\0\6\12\25\0"+
    "\4\12\2\0\1\12\1\232\3\12\2\0\12\12\1\0"+
    "\6\12\25\0\4\12\2\0\5\12\2\0\12\12\1\0"+
    "\1\233\5\12\25\0\4\12\2\0\1\12\1\234\3\12"+
    "\2\0\12\12\1\0\6\12\25\0\4\12\2\0\5\12"+
    "\2\0\12\12\1\0\1\235\5\12\55\0\1\236\46\0"+
    "\1\237\46\0\4\12\2\0\5\12\2\0\12\12\1\0"+
    "\1\240\5\12\25\0\4\12\2\0\5\12\2\0\5\12"+
    "\1\241\4\12\1\0\6\12\25\0\4\12\2\0\2\12"+
    "\1\242\2\12\2\0\12\12\1\0\6\12\51\0\1\243"+
    "\36\0\4\12\2\0\5\12\2\0\7\12\1\244\2\12"+
    "\1\0\6\12\21\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5304];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\2\11\1\1\1\11\7\1\2\11\14\1\5\11"+
    "\1\1\2\11\5\1\4\11\3\1\3\11\3\1\2\11"+
    "\20\1\1\0\4\1\17\11\21\1\1\0\23\1\1\0"+
    "\16\1\1\0\2\1\1\0\11\1\1\0\1\11\3\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    //LexicalErrorManager LexicalErrorManager = new LexicalErrorManager ();
    private int commentCount = 0;

    // Cadena de caracteres leida
    private StringBuffer  cadena = new StringBuffer();
    private int cadena_line = 0;
    private int cadena_column = 0;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public Scanner(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzPushbackPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead < 0) {
      return true;
    }
    else {
      zzEndRead+= numRead;
      return false;
    }
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = zzPushbackPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 44: 
          { cadena.append('\t');
          }
        case 72: break;
        case 57: 
          { Token token = new Token (sym.FLT);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 73: break;
        case 35: 
          { Token token = new Token (sym.DIFF);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 74: break;
        case 15: 
          { Token token = new Token (sym.ANDPERSAND);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 75: break;
        case 55: 
          { Token token = new Token (sym.CASE);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 76: break;
        case 19: 
          { Token token = new Token (sym.NOT);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 77: break;
        case 49: 
          { Token token = new Token (sym.INT);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 78: break;
        case 7: 
          { Token token = new Token (sym.MUL);
                            token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 79: break;
        case 21: 
          { Token token = new Token (sym.ITER);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 80: break;
        case 63: 
          { Token token = new Token (sym.SWITCH);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 81: break;
        case 47: 
          { cadena.append("\\");
          }
        case 82: break;
        case 25: 
          { cadena.append(yytext());
          }
        case 83: break;
        case 69: 
          { Token token = new Token (sym.DEFAULT);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 84: break;
        case 20: 
          { Token token = new Token (sym.PLUS);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 85: break;
        case 17: 
          { Token token = new Token (sym.MINUS);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 86: break;
        case 43: 
          { cadena.append('\r');
          }
        case 87: break;
        case 2: 
          { /* Ignorar fin de línea */
          }
        case 88: break;
        case 14: 
          { Token token = new Token (sym.COLON);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 89: break;
        case 28: 
          { LexicalError error = new LexicalError ();
                           error.setLine (yyline + 1);
                           error.setColumn (yycolumn + 1);
                           error.setText (yytext ());
                           LexicalErrorManager.lexicalError (error);
                           LexicalErrorManager.lexicalFatalError("Entero: " + yytext() + " no valido");
          }
        case 90: break;
        case 12: 
          { Token token = new Token (sym.COMA);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 91: break;
        case 40: 
          { Token token = new Token (sym.MINUSMINUS);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                           token.setLexeme (yytext ());
                            return token;
          }
        case 92: break;
        case 26: 
          { LexicalError error = new LexicalError ();
                           error.setLine (yyline + 1);
                           error.setColumn (yycolumn + 1);
                           error.setText (yytext ());
                           LexicalErrorManager.lexicalError (error);
                           LexicalErrorManager.lexicalFatalError("Cadena de caracteres mal construida");
          }
        case 93: break;
        case 1: 
          { LexicalError error = new LexicalError ();
                           error.setLine (yyline + 1);
                           error.setColumn (yycolumn + 1);
                           error.setText (yytext ());
                           LexicalErrorManager.lexicalError (error);
                           LexicalErrorManager.lexicalFatalError("Caracter no permitido");
          }
        case 94: break;
        case 30: 
          { if (commentCount != 0) {
                                LexicalError error = new LexicalError ();
                                error.setLine(yyline + 1);
                                error.setColumn(yycolumn + 1);
                                error.setText(yytext());
                                LexicalErrorManager.lexicalError(error);
                                LexicalErrorManager.lexicalFatalError("Error al procesar el comentario");
                              }
                              commentCount = 1;
                              yybegin(COMMENT);
          }
        case 95: break;
        case 36: 
          { Token token = new Token (sym.OR);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 96: break;
        case 58: 
          { Token token = new Token (sym.PRINT);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 97: break;
        case 68: 
          { Token token = new Token (sym.PRINTLN);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 98: break;
        case 46: 
          { cadena.append('\"');
          }
        case 99: break;
        case 5: 
          { Token token = new Token (sym.ID);
                            token.setLine(yyline + 1);
                            token.setColumn(yycolumn + 1);
                            token.setLexeme(yytext());
                            return token;
          }
        case 100: break;
        case 22: 
          { Token token = new Token (sym.DOT);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 101: break;
        case 33: 
          { Token token = new Token (sym.AND);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 102: break;
        case 16: 
          { Token token = new Token (sym.LESS);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 103: break;
        case 54: 
          { Token token = new Token (sym.ENUM);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 104: break;
        case 39: 
          { Token token = new Token (sym.SUBSASSIG);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 105: break;
        case 4: 
          { Token token = new Token (sym.INTEGER);
                            token.setLine(yyline + 1);
                            token.setColumn(yycolumn + 1);
                            token.setLexeme(yytext());
                            return token;
          }
        case 106: break;
        case 41: 
          { commentCount ++;
          }
        case 107: break;
        case 31: 
          { LexicalError error = new LexicalError ();
                                error.setLine(yyline + 1);
                                error.setColumn(yycolumn + 1);
                                error.setText(yytext());
                                LexicalErrorManager.lexicalError(error);
                                LexicalErrorManager.lexicalFatalError("Fin de comentario no esperado");
          }
        case 108: break;
        case 3: 
          { /* Ignorar espacios en blanco */
          }
        case 109: break;
        case 45: 
          { cadena.append('\n');
          }
        case 110: break;
        case 23: 
          { cadena.setLength(0);
                            cadena_line = yyline + 1;
                            cadena_column = yycolumn + 1;
                            yybegin(STRING);
          }
        case 111: break;
        case 9: 
          { Token token = new Token (sym.RPAREN);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 112: break;
        case 50: 
          { Token token = new Token (sym.TMP);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 113: break;
        case 42: 
          { if ((--commentCount) == 0) {
                            yybegin(YYINITIAL);
                          }
          }
        case 114: break;
        case 52: 
          { Token token = new Token (sym.READ);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 115: break;
        case 38: 
          { Token token = new Token (sym.PLUSPLUS);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 116: break;
        case 6: 
          { Token token = new Token (sym.DIV);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 117: break;
        case 18: 
          { Token token = new Token (sym.ASSIG);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 118: break;
        case 64: 
          { Token token = new Token (sym.IMPORT);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 119: break;
        case 62: 
          { Token token = new Token (sym.STR);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 120: break;
        case 8: 
          { Token token = new Token (sym.LPAREN);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 121: break;
        case 51: 
          { Token token = new Token (sym.VAR);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 122: break;
        case 70: 
          { Token token = new Token (sym.DEFINE);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 123: break;
        case 37: 
          { Token token = new Token (sym.ADDASSIG);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 124: break;
        case 13: 
          { Token token = new Token (sym.SEMICOLON);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 125: break;
        case 27: 
          { yybegin(YYINITIAL);
                            Token token = new Token (sym.STRING);
                            token.setLine(cadena_line);
                            token.setColumn(cadena_column);
                            token.setLexeme(cadena.toString());
                            return token;
          }
        case 126: break;
        case 11: 
          { Token token = new Token (sym.RCURLY);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 127: break;
        case 34: 
          { Token token = new Token (sym.EQUAL);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                           token.setLexeme (yytext ());
                            return token;
          }
        case 128: break;
        case 10: 
          { Token token = new Token (sym.LCURLY);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 129: break;
        case 66: 
          { Token token = new Token (sym.RETURN);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 130: break;
        case 67: 
          { Token token = new Token (sym.FLUSH);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 131: break;
        case 59: 
          { Token token = new Token (sym.BREAK);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 132: break;
        case 53: 
          { Token token = new Token (sym.ELSE);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 133: break;
        case 56: 
          { Token token = new Token (sym.VOID);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 134: break;
        case 24: 
          { /* IGNORE */
          }
        case 135: break;
        case 32: 
          { Token token = new Token (sym.IF);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 136: break;
        case 48: 
          { Token token = new Token (sym.FOR);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 137: break;
        case 71: 
          { Token token = new Token (sym.CONTINUE);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 138: break;
        case 29: 
          { LexicalError error = new LexicalError ();
                           error.setLine (yyline + 1);
                           error.setColumn (yycolumn + 1);
                           error.setText (yytext ());
                           LexicalErrorManager.lexicalError (error);
                           LexicalErrorManager.lexicalFatalError("Identificador: " + yytext() + " no valido");
          }
        case 139: break;
        case 60: 
          { Token token = new Token (sym.WHILE);
                           token.setLine (yyline + 1);
                           token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                           return token;
          }
        case 140: break;
        case 65: 
          { Token token = new Token (sym.MODULE);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 141: break;
        case 61: 
          { Token token = new Token (sym.STRUCT);
                            token.setLine (yyline + 1);
                            token.setColumn (yycolumn + 1);
                            token.setLexeme (yytext ());
                            return token;
          }
        case 142: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case STRING: {
              LexicalError error = new LexicalError ();
                            error.setLine(yyline + 1);
                            error.setColumn(yycolumn + 1);
                            error.setText(yytext());
                            LexicalErrorManager.lexicalError(error);
                            LexicalErrorManager.lexicalFatalError("Cadena de caracteres no terminada");
            }
            case 165: break;
            case YYINITIAL: {
              return new java_cup.runtime.Symbol(sym.EOF);
            }
            case 166: break;
            case COMMENT: {
              LexicalError error = new LexicalError ();
                            error.setLine(yyline + 1);
                            error.setColumn(yycolumn + 1);
                            error.setText(yytext());
                            LexicalErrorManager.lexicalError(error);
                            LexicalErrorManager.lexicalFatalError("Comentario Mal Balanceado");
            }
            case 167: break;
            default:
              { return new java_cup.runtime.Symbol(sym.EOF); }
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
