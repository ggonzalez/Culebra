
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 04 01:20:48 CEST 2009
//----------------------------------------------------

package culebra.syntax;

import java_cup.runtime.Symbol;
import java.util.*;
import java.io.*;
import culebra.*;
import culebra.lexical.Token;
import culebra.syntax.*;
import culebra.arch.*;
import culebra.arch.sentences.*;
import culebra.arch.sentences.io.*;
import culebra.arch.expressions.*;
import culebra.semantic.*;
import culebra.arch.types.*;
import culebra.arch.variable.*;
import culebra.arch.variable.behaviour.*;
import culebra.arch.variable.storage.*;
import culebra.arch.variable.factories.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 04 01:20:48 CEST 2009
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\161\000\002\002\004\000\002\002\003\000\002\132" +
    "\002\000\002\003\006\000\002\004\005\000\002\004\002" +
    "\000\002\005\005\000\002\005\002\000\002\007\004\000" +
    "\002\007\003\000\002\011\003\000\002\011\002\000\002" +
    "\010\003\000\002\010\003\000\002\012\012\000\002\017" +
    "\005\000\002\017\002\000\002\013\004\000\002\013\003" +
    "\000\002\014\006\000\002\014\010\000\002\015\005\000" +
    "\002\015\003\000\002\015\002\000\002\016\005\000\002" +
    "\016\005\000\002\016\003\000\002\020\006\000\002\020" +
    "\005\000\002\027\003\000\002\026\003\000\002\021\005" +
    "\000\002\021\003\000\002\022\003\000\002\022\005\000" +
    "\002\022\005\000\002\023\006\000\002\023\005\000\002" +
    "\024\005\000\002\024\003\000\002\025\003\000\002\025" +
    "\005\000\002\133\002\000\002\030\011\000\002\032\005" +
    "\000\002\032\003\000\002\032\002\000\002\033\004\000" +
    "\002\031\006\000\002\031\005\000\002\031\004\000\002" +
    "\031\002\000\002\041\004\000\002\041\003\000\002\040" +
    "\003\000\002\040\004\000\002\040\004\000\002\040\004" +
    "\000\002\040\004\000\002\040\004\000\002\040\004\000" +
    "\002\040\004\000\002\040\004\000\002\040\003\000\002" +
    "\040\003\000\002\037\006\000\002\037\005\000\002\037" +
    "\004\000\002\060\003\000\002\061\005\000\002\061\003" +
    "\000\002\042\005\000\002\042\007\000\002\045\007\000" +
    "\002\046\013\000\002\047\003\000\002\047\002\000\002" +
    "\051\003\000\002\050\003\000\002\050\002\000\002\134" +
    "\002\000\002\055\006\000\002\056\006\000\002\052\006" +
    "\000\002\053\006\000\002\054\005\000\002\057\003\000" +
    "\002\057\005\000\002\057\003\000\002\057\003\000\002" +
    "\057\003\000\002\057\003\000\002\057\005\000\002\057" +
    "\005\000\002\057\005\000\002\057\005\000\002\057\005" +
    "\000\002\057\005\000\002\057\005\000\002\057\005\000" +
    "\002\057\005\000\002\057\005\000\002\057\004\000\002" +
    "\057\004\000\002\057\004\000\002\057\005\000\002\034" +
    "\006\000\002\035\005\000\002\035\003\000\002\035\002" +
    "\000\002\036\003\000\002\006\005\000\002\006\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\012\006\ufffa\012\ufffa\013\005\037\ufffa\001" +
    "\002\000\004\002\314\001\002\000\004\006\312\001\002" +
    "\000\004\002\000\001\002\000\010\006\ufffc\012\010\037" +
    "\ufffc\001\002\000\004\005\310\001\002\000\006\006\uffff" +
    "\037\uffff\001\002\000\006\006\014\037\013\001\002\000" +
    "\004\006\245\001\002\000\004\040\uffd7\001\002\000\010" +
    "\002\ufff4\006\ufff4\037\ufff4\001\002\000\010\002\ufffe\006" +
    "\014\037\013\001\002\000\010\002\ufff5\006\ufff5\037\ufff5" +
    "\001\002\000\010\002\ufff8\006\ufff8\037\ufff8\001\002\000" +
    "\010\002\ufff9\006\ufff9\037\ufff9\001\002\000\004\040\023" +
    "\001\002\000\010\037\024\041\uffd3\044\uffd3\001\002\000" +
    "\004\006\uffe3\001\002\000\004\006\244\001\002\000\006" +
    "\041\031\044\030\001\002\000\006\041\uffd4\044\uffd4\001" +
    "\002\000\004\037\024\001\002\000\014\002\uffce\006\uffce" +
    "\037\uffce\042\033\045\uffce\001\002\000\012\002\ufff6\006" +
    "\ufff6\037\ufff6\045\065\001\002\000\024\006\045\020\041" +
    "\021\062\032\064\037\024\042\047\043\042\070\053\071" +
    "\055\001\002\000\022\006\ufff6\020\ufff6\021\ufff6\042\ufff6" +
    "\043\ufff6\045\065\070\ufff6\071\ufff6\001\002\000\020\006" +
    "\uffcb\020\uffcb\021\uffcb\042\uffcb\043\uffcb\070\uffcb\071\uffcb" +
    "\001\002\000\022\006\ufff6\020\ufff6\021\ufff6\042\ufff6\043" +
    "\ufff6\045\065\070\ufff6\071\ufff6\001\002\000\004\006\226" +
    "\001\002\000\004\037\024\001\002\000\004\040\221\001" +
    "\002\000\012\002\uffcf\006\uffcf\037\uffcf\045\uffcf\001\002" +
    "\000\020\006\uffc1\020\uffc1\021\uffc1\042\uffc1\043\uffc1\070" +
    "\uffc1\071\uffc1\001\002\000\020\006\045\020\041\021\062" +
    "\042\047\043\220\070\053\071\055\001\002\000\012\040" +
    "\uff91\065\150\073\212\074\211\001\002\000\022\006\ufff6" +
    "\020\ufff6\021\ufff6\042\ufff6\043\ufff6\045\065\070\ufff6\071" +
    "\ufff6\001\002\000\024\006\045\020\041\021\062\032\064" +
    "\037\024\042\047\043\202\070\053\071\055\001\002\000" +
    "\004\040\173\001\002\000\022\006\ufff6\020\ufff6\021\ufff6" +
    "\042\ufff6\043\ufff6\045\065\070\ufff6\071\ufff6\001\002\000" +
    "\016\006\045\020\041\021\062\042\047\070\053\071\055" +
    "\001\002\000\004\040\164\001\002\000\020\006\uffc2\020" +
    "\uffc2\021\uffc2\042\uffc2\043\uffc2\070\uffc2\071\uffc2\001\002" +
    "\000\004\040\161\001\002\000\022\006\ufff6\020\ufff6\021" +
    "\ufff6\042\ufff6\043\ufff6\045\065\070\ufff6\071\ufff6\001\002" +
    "\000\020\006\uffcc\020\uffcc\021\uffcc\042\uffcc\043\uffcc\070" +
    "\uffcc\071\uffcc\001\002\000\022\006\ufff6\020\ufff6\021\ufff6" +
    "\042\ufff6\043\ufff6\045\065\070\ufff6\071\ufff6\001\002\000" +
    "\022\006\ufff6\020\ufff6\021\ufff6\042\ufff6\043\ufff6\045\065" +
    "\070\ufff6\071\ufff6\001\002\000\004\040\067\001\002\000" +
    "\022\006\ufff6\020\ufff6\021\ufff6\042\ufff6\043\ufff6\045\065" +
    "\070\ufff6\071\ufff6\001\002\000\004\037\uffe4\001\002\000" +
    "\026\002\ufff7\006\ufff7\012\ufff7\020\ufff7\021\ufff7\037\ufff7" +
    "\042\ufff7\043\ufff7\070\ufff7\071\ufff7\001\002\000\020\006" +
    "\uffca\020\uffca\021\uffca\042\uffca\043\uffca\070\uffca\071\uffca" +
    "\001\002\000\006\006\070\045\uffb5\001\002\000\006\065" +
    "\150\073\151\001\002\000\004\045\uffb6\001\002\000\004" +
    "\045\073\001\002\000\016\004\076\005\077\006\102\040" +
    "\105\062\104\072\074\001\002\000\004\040\146\001\002" +
    "\000\056\006\uffa6\020\uffa6\021\uffa6\041\uffa6\042\uffa6\043" +
    "\uffa6\044\uffa6\045\uffa6\050\uffa6\051\uffa6\052\uffa6\053\uffa6" +
    "\054\uffa6\055\uffa6\056\uffa6\057\uffa6\060\uffa6\061\uffa6\063" +
    "\uffa6\064\uffa6\070\uffa6\071\uffa6\001\002\000\056\006\uffa9" +
    "\020\uffa9\021\uffa9\041\uffa9\042\uffa9\043\uffa9\044\uffa9\045" +
    "\uffa9\050\uffa9\051\uffa9\052\uffa9\053\uffa9\054\uffa9\055\uffa9" +
    "\056\uffa9\057\uffa9\060\uffa9\061\uffa9\063\uffa9\064\uffa9\070" +
    "\uffa9\071\uffa9\001\002\000\056\006\uffa8\020\uffa8\021\uffa8" +
    "\041\uffa8\042\uffa8\043\uffa8\044\uffa8\045\uffa8\050\uffa8\051" +
    "\uffa8\052\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\057\uffa8" +
    "\060\uffa8\061\uffa8\063\uffa8\064\uffa8\070\uffa8\071\uffa8\001" +
    "\002\000\004\045\141\001\002\000\056\006\uffa7\020\uffa7" +
    "\021\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\045\uffa7\050" +
    "\uffa7\051\uffa7\052\uffa7\053\uffa7\054\uffa7\055\uffa7\056\uffa7" +
    "\057\uffa7\060\uffa7\061\uffa7\063\uffa7\064\uffa7\070\uffa7\071" +
    "\uffa7\001\002\000\062\006\uffab\020\uffab\021\uffab\040\uff91" +
    "\041\uffab\042\uffab\043\uffab\044\uffab\045\uffab\050\uffab\051" +
    "\uffab\052\uffab\053\uffab\054\uffab\055\uffab\056\uffab\057\uffab" +
    "\060\uffab\061\uffab\063\uffab\064\uffab\070\uffab\071\uffab\073" +
    "\137\001\002\000\034\045\uffb4\050\114\051\107\052\121" +
    "\053\115\054\116\055\111\056\113\057\120\060\110\061" +
    "\123\063\112\064\122\001\002\000\016\004\076\005\077" +
    "\006\102\040\105\062\104\072\074\001\002\000\016\004" +
    "\076\005\077\006\102\040\105\062\104\072\074\001\002" +
    "\000\034\041\117\050\114\051\107\052\121\053\115\054" +
    "\116\055\111\056\113\057\120\060\110\061\123\063\112" +
    "\064\122\001\002\000\016\004\076\005\077\006\102\040" +
    "\105\062\104\072\074\001\002\000\016\004\076\005\077" +
    "\006\102\040\105\062\104\072\074\001\002\000\016\004" +
    "\076\005\077\006\102\040\105\062\104\072\074\001\002" +
    "\000\056\006\uff9b\020\uff9b\021\uff9b\041\uff9b\042\uff9b\043" +
    "\uff9b\044\uff9b\045\uff9b\050\uff9b\051\uff9b\052\uff9b\053\uff9b" +
    "\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060\uff9b\061\uff9b\063" +
    "\uff9b\064\uff9b\070\uff9b\071\uff9b\001\002\000\016\004\076" +
    "\005\077\006\102\040\105\062\104\072\074\001\002\000" +
    "\016\004\076\005\077\006\102\040\105\062\104\072\074" +
    "\001\002\000\016\004\076\005\077\006\102\040\105\062" +
    "\104\072\074\001\002\000\016\004\076\005\077\006\102" +
    "\040\105\062\104\072\074\001\002\000\056\006\uff98\020" +
    "\uff98\021\uff98\041\uff98\042\uff98\043\uff98\044\uff98\045\uff98" +
    "\050\uff98\051\uff98\052\uff98\053\uff98\054\uff98\055\uff98\056" +
    "\uff98\057\uff98\060\uff98\061\uff98\063\uff98\064\uff98\070\uff98" +
    "\071\uff98\001\002\000\016\004\076\005\077\006\102\040" +
    "\105\062\104\072\074\001\002\000\016\004\076\005\077" +
    "\006\102\040\105\062\104\072\074\001\002\000\056\006" +
    "\uff9a\020\uff9a\021\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a" +
    "\045\uff9a\050\uff9a\051\uff9a\052\uff9a\053\uff9a\054\uff9a\055" +
    "\uff9a\056\uff9a\057\uff9a\060\uff9a\061\uff9a\063\uff9a\064\uff9a" +
    "\070\uff9a\071\uff9a\001\002\000\016\004\076\005\077\006" +
    "\102\040\105\062\104\072\074\001\002\000\056\006\uffa0" +
    "\020\uffa0\021\uffa0\041\uffa0\042\uffa0\043\uffa0\044\uffa0\045" +
    "\uffa0\050\114\051\107\052\uffa0\053\uffa0\054\uffa0\055\uffa0" +
    "\056\uffa0\057\uffa0\060\uffa0\061\uffa0\063\uffa0\064\uffa0\070" +
    "\uffa0\071\uffa0\001\002\000\056\006\uff9d\020\uff9d\021\uff9d" +
    "\041\uff9d\042\uff9d\043\uff9d\044\uff9d\045\uff9d\050\114\051" +
    "\107\052\uff9d\053\uff9d\054\116\055\111\056\113\057\120" +
    "\060\110\061\123\063\uff9d\064\uff9d\070\uff9d\071\uff9d\001" +
    "\002\000\056\006\uff9e\020\uff9e\021\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\050\114\051\107\052\uff9e\053" +
    "\uff9e\054\uff9e\055\uff9e\056\uff9e\057\uff9e\060\110\061\123" +
    "\063\uff9e\064\uff9e\070\uff9e\071\uff9e\001\002\000\056\006" +
    "\uffa3\020\uffa3\021\uffa3\041\uffa3\042\uffa3\043\uffa3\044\uffa3" +
    "\045\uffa3\050\114\051\107\052\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\113\057\120\060\110\061\123\063\uffa3\064\uffa3" +
    "\070\uffa3\071\uffa3\001\002\000\056\006\uff9c\020\uff9c\021" +
    "\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\050\114" +
    "\051\107\052\uff9c\053\uff9c\054\116\055\111\056\113\057" +
    "\120\060\110\061\123\063\uff9c\064\uff9c\070\uff9c\071\uff9c" +
    "\001\002\000\056\006\uffa5\020\uffa5\021\uffa5\041\uffa5\042" +
    "\uffa5\043\uffa5\044\uffa5\045\uffa5\050\uffa5\051\uffa5\052\uffa5" +
    "\053\uffa5\054\uffa5\055\uffa5\056\uffa5\057\uffa5\060\uffa5\061" +
    "\uffa5\063\uffa5\064\uffa5\070\uffa5\071\uffa5\001\002\000\056" +
    "\006\uff9f\020\uff9f\021\uff9f\041\uff9f\042\uff9f\043\uff9f\044" +
    "\uff9f\045\uff9f\050\114\051\107\052\uff9f\053\uff9f\054\uff9f" +
    "\055\uff9f\056\uff9f\057\uff9f\060\110\061\123\063\uff9f\064" +
    "\uff9f\070\uff9f\071\uff9f\001\002\000\056\006\uffa2\020\uffa2" +
    "\021\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045\uffa2\050" +
    "\114\051\107\052\uffa2\053\uffa2\054\uffa2\055\uffa2\056\113" +
    "\057\120\060\110\061\123\063\uffa2\064\uffa2\070\uffa2\071" +
    "\uffa2\001\002\000\056\006\uffa1\020\uffa1\021\uffa1\041\uffa1" +
    "\042\uffa1\043\uffa1\044\uffa1\045\uffa1\050\114\051\107\052" +
    "\uffa1\053\uffa1\054\uffa1\055\uffa1\056\uffa1\057\uffa1\060\uffa1" +
    "\061\123\063\uffa1\064\uffa1\070\uffa1\071\uffa1\001\002\000" +
    "\056\006\uffa4\020\uffa4\021\uffa4\041\uffa4\042\uffa4\043\uffa4" +
    "\044\uffa4\045\uffa4\050\uffa4\051\uffa4\052\uffa4\053\uffa4\054" +
    "\uffa4\055\uffa4\056\uffa4\057\uffa4\060\uffa4\061\uffa4\063\uffa4" +
    "\064\uffa4\070\uffa4\071\uffa4\001\002\000\056\006\uff99\020" +
    "\uff99\021\uff99\041\uff99\042\uff99\043\uff99\044\uff99\045\uff99" +
    "\050\114\051\107\052\121\053\115\054\116\055\111\056" +
    "\113\057\120\060\110\061\123\063\uff99\064\uff99\070\uff99" +
    "\071\uff99\001\002\000\004\006\140\001\002\000\060\006" +
    "\uffaa\020\uffaa\021\uffaa\040\uff92\041\uffaa\042\uffaa\043\uffaa" +
    "\044\uffaa\045\uffaa\050\uffaa\051\uffaa\052\uffaa\053\uffaa\054" +
    "\uffaa\055\uffaa\056\uffaa\057\uffaa\060\uffaa\061\uffaa\063\uffaa" +
    "\064\uffaa\070\uffaa\071\uffaa\001\002\000\006\006\070\041" +
    "\uffb2\001\002\000\004\041\144\001\002\000\004\041\uffb3" +
    "\001\002\000\004\042\047\001\002\000\022\006\uffb7\020" +
    "\uffb7\021\uffb7\042\uffb7\043\uffb7\045\uffb7\070\uffb7\071\uffb7" +
    "\001\002\000\004\041\147\001\002\000\056\006\uffac\020" +
    "\uffac\021\uffac\041\uffac\042\uffac\043\uffac\044\uffac\045\uffac" +
    "\050\uffac\051\uffac\052\uffac\053\uffac\054\uffac\055\uffac\056" +
    "\uffac\057\uffac\060\uffac\061\uffac\063\uffac\064\uffac\070\uffac" +
    "\071\uffac\001\002\000\016\004\076\005\077\006\102\040" +
    "\105\062\104\072\074\001\002\000\004\006\152\001\002" +
    "\000\004\065\153\001\002\000\016\004\076\005\077\006" +
    "\102\040\105\062\104\072\074\001\002\000\054\006\uffb9" +
    "\020\uffb9\021\uffb9\041\uffb9\042\uffb9\043\uffb9\045\uffb9\050" +
    "\114\051\107\052\121\053\115\054\116\055\111\056\113" +
    "\057\120\060\110\061\123\063\112\064\122\070\uffb9\071" +
    "\uffb9\001\002\000\054\006\uffba\020\uffba\021\uffba\041\uffba" +
    "\042\uffba\043\uffba\045\uffba\050\114\051\107\052\121\053" +
    "\115\054\116\055\111\056\113\057\120\060\110\061\123" +
    "\063\112\064\122\070\uffba\071\uffba\001\002\000\020\006" +
    "\uffc5\020\uffc5\021\uffc5\042\uffc5\043\uffc5\070\uffc5\071\uffc5" +
    "\001\002\000\020\006\uffc6\020\uffc6\021\uffc6\042\uffc6\043" +
    "\uffc6\070\uffc6\071\uffc6\001\002\000\020\006\uffc8\020\uffc8" +
    "\021\uffc8\042\uffc8\043\uffc8\070\uffc8\071\uffc8\001\002\000" +
    "\016\004\076\005\077\006\102\040\105\062\104\072\074" +
    "\001\002\000\034\041\163\050\114\051\107\052\121\053" +
    "\115\054\116\055\111\056\113\057\120\060\110\061\123" +
    "\063\112\064\122\001\002\000\022\006\uffad\020\uffad\021" +
    "\uffad\042\uffad\043\uffad\045\uffad\070\uffad\071\uffad\001\002" +
    "\000\016\004\076\005\077\006\102\040\105\062\104\072" +
    "\074\001\002\000\034\041\166\050\114\051\107\052\121" +
    "\053\115\054\116\055\111\056\113\057\120\060\110\061" +
    "\123\063\112\064\122\001\002\000\022\006\uffae\020\uffae" +
    "\021\uffae\042\uffae\043\uffae\045\uffae\070\uffae\071\uffae\001" +
    "\002\000\020\006\045\020\041\021\062\042\047\043\170" +
    "\070\053\071\055\001\002\000\012\002\uffd1\006\uffd1\037" +
    "\uffd1\045\uffd1\001\002\000\020\006\uffcd\020\uffcd\021\uffcd" +
    "\042\uffcd\043\uffcd\070\uffcd\071\uffcd\001\002\000\020\006" +
    "\uffc4\020\uffc4\021\uffc4\042\uffc4\043\uffc4\070\uffc4\071\uffc4" +
    "\001\002\000\022\004\076\005\077\006\102\040\105\041" +
    "\uff94\044\uff94\062\104\072\074\001\002\000\036\041\uff93" +
    "\044\uff93\050\114\051\107\052\121\053\115\054\116\055" +
    "\111\056\113\057\120\060\110\061\123\063\112\064\122" +
    "\001\002\000\006\041\200\044\177\001\002\000\006\041" +
    "\uff95\044\uff95\001\002\000\016\004\076\005\077\006\102" +
    "\040\105\062\104\072\074\001\002\000\056\006\uff97\020" +
    "\uff97\021\uff97\041\uff97\042\uff97\043\uff97\044\uff97\045\uff97" +
    "\050\uff97\051\uff97\052\uff97\053\uff97\054\uff97\055\uff97\056" +
    "\uff97\057\uff97\060\uff97\061\uff97\063\uff97\064\uff97\070\uff97" +
    "\071\uff97\001\002\000\006\041\uff96\044\uff96\001\002\000" +
    "\022\006\uffbe\020\uffbe\021\uffbe\042\uffbe\043\uffbe\045\uffbe" +
    "\070\uffbe\071\uffbe\001\002\000\020\006\045\020\041\021" +
    "\062\042\047\043\207\070\053\071\055\001\002\000\016" +
    "\006\045\020\041\021\062\042\047\070\053\071\055\001" +
    "\002\000\020\006\045\020\041\021\062\042\047\043\206" +
    "\070\053\071\055\001\002\000\022\006\uffc0\020\uffc0\021" +
    "\uffc0\042\uffc0\043\uffc0\045\uffc0\070\uffc0\071\uffc0\001\002" +
    "\000\022\006\uffbf\020\uffbf\021\uffbf\042\uffbf\043\uffbf\045" +
    "\uffbf\070\uffbf\071\uffbf\001\002\000\020\006\uffc7\020\uffc7" +
    "\021\uffc7\042\uffc7\043\uffc7\070\uffc7\071\uffc7\001\002\000" +
    "\004\042\uffb1\001\002\000\006\006\214\014\213\001\002" +
    "\000\022\006\ufff6\020\ufff6\021\ufff6\042\ufff6\043\ufff6\045" +
    "\065\070\ufff6\071\ufff6\001\002\000\006\040\uff92\065\153" +
    "\001\002\000\020\006\uffaf\020\uffaf\021\uffaf\042\uffaf\043" +
    "\uffaf\070\uffaf\071\uffaf\001\002\000\004\042\047\001\002" +
    "\000\020\006\uffb0\020\uffb0\021\uffb0\042\uffb0\043\uffb0\070" +
    "\uffb0\071\uffb0\001\002\000\012\002\uffd0\006\uffd0\037\uffd0" +
    "\045\uffd0\001\002\000\016\004\076\005\077\006\102\040" +
    "\105\062\104\072\074\001\002\000\034\041\223\050\114" +
    "\051\107\052\121\053\115\054\116\055\111\056\113\057" +
    "\120\060\110\061\123\063\112\064\122\001\002\000\004" +
    "\042\047\001\002\000\022\006\uffb8\020\uffb8\021\uffb8\042" +
    "\uffb8\043\uffb8\045\uffb8\070\uffb8\071\uffb8\001\002\000\004" +
    "\006\226\001\002\000\024\006\uffd9\020\uffd9\021\uffd9\042" +
    "\uffd9\044\uffd9\045\uffd9\065\234\070\uffd9\071\uffd9\001\002" +
    "\000\022\006\ufff6\020\ufff6\021\ufff6\042\ufff6\044\231\045" +
    "\065\070\ufff6\071\ufff6\001\002\000\022\006\uffda\020\uffda" +
    "\021\uffda\042\uffda\044\uffda\045\uffda\070\uffda\071\uffda\001" +
    "\002\000\004\006\226\001\002\000\016\006\uffdd\020\uffdd" +
    "\021\uffdd\042\uffdd\070\uffdd\071\uffdd\001\002\000\022\006" +
    "\uffdb\020\uffdb\021\uffdb\042\uffdb\044\uffdb\045\uffdb\070\uffdb" +
    "\071\uffdb\001\002\000\016\004\076\005\077\006\102\040" +
    "\105\062\104\072\074\001\002\000\052\006\uffd8\020\uffd8" +
    "\021\uffd8\042\uffd8\044\uffd8\045\uffd8\050\114\051\107\052" +
    "\121\053\115\054\116\055\111\056\113\057\120\060\110" +
    "\061\123\063\112\064\122\070\uffd8\071\uffd8\001\002\000" +
    "\022\006\ufff6\020\ufff6\021\ufff6\042\ufff6\044\231\045\065" +
    "\070\ufff6\071\ufff6\001\002\000\016\006\uffdc\020\uffdc\021" +
    "\uffdc\042\uffdc\070\uffdc\071\uffdc\001\002\000\020\006\uffc3" +
    "\020\uffc3\021\uffc3\042\uffc3\043\uffc3\070\uffc3\071\uffc3\001" +
    "\002\000\020\006\uffc9\020\uffc9\021\uffc9\042\uffc9\043\uffc9" +
    "\070\uffc9\071\uffc9\001\002\000\010\002\uffd6\006\uffd6\037" +
    "\uffd6\001\002\000\006\041\uffd5\044\uffd5\001\002\000\006" +
    "\041\uffd2\044\uffd2\001\002\000\006\040\247\042\ufff1\001" +
    "\002\000\004\042\261\001\002\000\010\006\250\041\uffea" +
    "\044\uffea\001\002\000\010\041\uffe7\044\uffe7\065\256\001" +
    "\002\000\006\041\uffeb\044\uffeb\001\002\000\006\041\254" +
    "\044\253\001\002\000\004\006\250\001\002\000\004\042" +
    "\ufff2\001\002\000\006\041\uffec\044\uffec\001\002\000\006" +
    "\005\260\006\257\001\002\000\006\041\uffe9\044\uffe9\001" +
    "\002\000\006\041\uffe8\044\uffe8\001\002\000\004\006\263" +
    "\001\002\000\006\006\263\043\274\001\002\000\012\006" +
    "\uffe0\043\uffe0\044\uffe0\065\270\001\002\000\010\006\uffe1" +
    "\043\uffe1\044\uffe1\001\002\000\010\006\uffef\043\uffef\044" +
    "\266\001\002\000\004\006\263\001\002\000\010\006\uffe2" +
    "\043\uffe2\044\uffe2\001\002\000\006\004\271\005\272\001" +
    "\002\000\010\006\uffdf\043\uffdf\044\uffdf\001\002\000\010" +
    "\006\uffde\043\uffde\044\uffde\001\002\000\010\006\ufff0\043" +
    "\ufff0\044\266\001\002\000\004\006\275\001\002\000\006" +
    "\040\300\073\301\001\002\000\012\002\ufff6\006\ufff6\037" +
    "\ufff6\045\065\001\002\000\010\002\ufff3\006\ufff3\037\ufff3" +
    "\001\002\000\010\006\250\041\uffea\044\uffea\001\002\000" +
    "\004\006\302\001\002\000\004\040\303\001\002\000\010" +
    "\006\250\041\uffea\044\uffea\001\002\000\006\041\305\044" +
    "\253\001\002\000\012\002\uffed\006\uffed\037\uffed\045\uffed" +
    "\001\002\000\006\041\307\044\253\001\002\000\012\002" +
    "\uffee\006\uffee\037\uffee\045\uffee\001\002\000\010\006\ufff6" +
    "\037\ufff6\045\065\001\002\000\006\006\ufffd\037\ufffd\001" +
    "\002\000\012\006\ufff6\012\ufff6\037\ufff6\045\065\001\002" +
    "\000\010\006\ufffb\012\ufffb\037\ufffb\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\312\000\010\002\003\003\005\005\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\010\001\001\000\002\001\001\000\004\132\011\001" +
    "\001\000\012\007\015\010\017\012\016\030\014\001\001" +
    "\000\002\001\001\000\004\133\021\001\001\000\002\001" +
    "\001\000\010\010\020\012\016\030\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\026\024\032\025\033\026\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\026\024\033\242\001\001\000\004\031\031" +
    "\001\001\000\004\011\241\001\001\000\044\006\047\023" +
    "\051\026\036\027\037\034\060\037\034\040\056\041\043" +
    "\042\062\043\033\044\055\045\045\046\057\052\050\053" +
    "\035\055\053\056\042\001\001\000\004\011\240\001\001" +
    "\000\002\001\001\000\004\011\237\001\001\000\006\024" +
    "\235\025\227\001\001\000\004\026\224\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\047\034\060\037\034\040\170\042\062\043\033\044\055" +
    "\045\045\046\057\052\050\053\035\055\053\056\042\001" +
    "\001\000\002\001\001\000\004\011\207\001\001\000\044" +
    "\006\047\023\203\026\036\027\037\034\060\037\034\040" +
    "\056\041\202\042\062\043\033\044\055\045\045\046\057" +
    "\052\050\053\035\055\053\056\042\001\001\000\002\001" +
    "\001\000\004\011\171\001\001\000\036\006\047\034\060" +
    "\037\034\040\056\041\166\042\062\043\033\044\055\045" +
    "\045\046\057\052\050\053\035\055\053\056\042\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\157\001\001\000\002\001\001\000\004\011\156" +
    "\001\001\000\004\011\155\001\001\000\002\001\001\000" +
    "\004\011\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\042\070\047\071\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\006\047\034\100\051\077\054\074\057\102\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\047\034\100\054\074" +
    "\057\135\001\001\000\012\006\047\034\100\054\074\057" +
    "\105\001\001\000\002\001\001\000\012\006\047\034\100" +
    "\054\074\057\134\001\001\000\012\006\047\034\100\054" +
    "\074\057\133\001\001\000\012\006\047\034\100\054\074" +
    "\057\132\001\001\000\002\001\001\000\012\006\047\034" +
    "\100\054\074\057\131\001\001\000\012\006\047\034\100" +
    "\054\074\057\130\001\001\000\012\006\047\034\100\054" +
    "\074\057\127\001\001\000\012\006\047\034\100\054\074" +
    "\057\126\001\001\000\002\001\001\000\012\006\047\034" +
    "\100\054\074\057\125\001\001\000\012\006\047\034\100" +
    "\054\074\057\124\001\001\000\002\001\001\000\012\006" +
    "\047\034\100\054\074\057\123\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\042\142" +
    "\050\141\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\037\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\047\034\100\054\074\057" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\047\034\100\054\074\057\153\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\006\047\034\100\054\074\057" +
    "\161\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\006\047\034\100\054\074\057\164\001\001\000\002\001" +
    "\001\000\002\001\001\000\034\006\047\034\060\037\034" +
    "\040\170\042\062\043\033\044\055\045\045\046\057\052" +
    "\050\053\035\055\053\056\042\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\006\047\034" +
    "\100\035\174\036\175\054\074\057\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\006" +
    "\047\034\100\036\200\054\074\057\173\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\006" +
    "\047\034\060\037\034\040\170\042\062\043\033\044\055" +
    "\045\045\046\057\052\050\053\035\055\053\056\042\001" +
    "\001\000\036\006\047\034\060\037\034\040\056\041\204" +
    "\042\062\043\033\044\055\045\045\046\057\052\050\053" +
    "\035\055\053\056\042\001\001\000\034\006\047\034\060" +
    "\037\034\040\170\042\062\043\033\044\055\045\045\046" +
    "\057\052\050\053\035\055\053\056\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\134" +
    "\215\001\001\000\002\001\001\000\004\011\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\037\216\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\006\047" +
    "\034\100\054\074\057\221\001\001\000\002\001\001\000" +
    "\004\037\223\001\001\000\002\001\001\000\006\024\226" +
    "\025\227\001\001\000\002\001\001\000\004\011\231\001" +
    "\001\000\002\001\001\000\004\025\232\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\006\047\034\100\054" +
    "\074\057\234\001\001\000\002\001\001\000\004\011\236" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\245\001\001\000\002\001\001\000\006\015" +
    "\251\016\250\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\254\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\013\261\021\264\022\263\001" +
    "\001\000\006\021\272\022\263\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\266\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\014\275\001" +
    "\001\000\002\001\001\000\004\011\276\001\001\000\002" +
    "\001\001\000\006\015\305\016\250\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\303\016\250\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\310\001\001\000\002\001\001" +
    "\000\004\011\312\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public void syntax_error(Symbol symbol)
	{
	    Token token = (Token) symbol.value;
	    SyntaxErrorManager.syntaxError ("Error sintactico", token);
	}

	public void unrecovered_syntax_error(java_cup.runtime.Symbol symbol)
	{
		Token token = (Token) symbol.value;
	    SyntaxErrorManager.syntaxFatalError ("Error fatal", token);
	}



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


    SyntaxErrorManager  errorManager = new SyntaxErrorManager();
    ModuleManager   moduleManager = new ModuleManager();
    FunctionManager functionManager = new FunctionManager();
    VariableManager globalVariables = new VariableManager("global");
    VariableManager currentVariables = null;
    Stack           stackIterator = new Stack();

    public Variable getVariable(String name) {
        if (currentVariables.hasVariable(name))
            return currentVariables.getVariable(name);

        if (globalVariables.hasVariable(name))
            return globalVariables.getVariable(name);

         return null;
    }

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // moduleFunctionName ::= ID 
            {
              ModuleFunction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ModuleFunction mn = new ModuleFunction();

    mn.setFunctionName(id.getLexeme());

    RESULT = mn;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("moduleFunctionName",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // moduleFunctionName ::= ID DOT ID 
            {
              ModuleFunction RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ModuleFunction mn = new ModuleFunction();

    mn.setModuleName(id1.getLexeme());
    mn.setFunctionName(id2.getLexeme());

    RESULT = mn;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("moduleFunctionName",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // functionCallOneArg ::= expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCallOneArg",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // functionCallArgsList ::= 
            {
              List RESULT =null;
		
    List l = new LinkedList();

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCallArgsList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // functionCallArgsList ::= functionCallOneArg 
            {
              List RESULT =null;
		int fcoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr fco = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List    l = new LinkedList();

    l.add(fco);

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCallArgsList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // functionCallArgsList ::= functionCallArgsList COMA functionCallOneArg 
            {
              List RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List fl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fcoleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fcoright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr fco = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List    l = new LinkedList();

    l.addAll(fl);
    l.add(fco);

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCallArgsList",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // functionCall ::= moduleFunctionName LPAREN functionCallArgsList RPAREN 
            {
              FunctionCall RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ModuleFunction mn = (ModuleFunction)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token l = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int fcalleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fcalright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List fcal = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Function f = null;

    if (mn.isLocalModule()) { 
        if (!functionManager.containsFunction(mn.getFunctionName())) { 
            errorManager.syntaxFatalError("Funtion not declared " + mn.getFunctionName(), l);
        }

        f = functionManager.getFunction(mn.getFunctionName());
    } else {
        FunctionManager fm = null;
        ModuleManager mm = null;

        if (!moduleManager.containsImportedModuleManager(mn.getModuleName())) {
            errorManager.syntaxFatalError("Module \"" + mn.getModuleName() + "\" not imported", l);
        }

        mm = moduleManager.getImportedModuleManager(mn.getModuleName());

        fm = mm.getFunctionManager();

        if (!fm.containsFunction(mn.getFunctionName())) { 
            errorManager.syntaxFatalError("Funtion not declared " + mn.getFunctionName(), l);
        }

       f = fm.getFunction(mn.getFunctionName());
    }
    if (f.getArguments().size() != fcal.size()) {
        errorManager.syntaxFatalError("Bad arguments number ", l);
    }

    FunctionCall fc = new FunctionCall();
    
    fc.setFunction(f);
    fc.setArguments(fcal);
    ListIterator iterArg = f.getArguments().listIterator();
    ListIterator iter = fcal.listIterator();
    while(iter.hasNext()) {
        Expr tmp = (Expr) iter.next();

        Variable varArg = (Variable) iterArg.next();

//        if (var.getType().getName() != varArg.getType().getName()) 
//            errorManager.syntaxFatalError("Variable " + tmp + "type != declaration argument type");
//System.out.println("Value tmp: " + tmp.getValue());
 //       varArg.setValue(tmp.getValue());
    }
    
    RESULT = fc;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionCall",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // expr ::= LPAREN expr RPAREN 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // expr ::= NOT expr 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // expr ::= expr MINUSMINUS 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // expr ::= expr PLUSPLUS 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // expr ::= expr DIV expr 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // expr ::= expr MUL expr 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // expr ::= expr DIFF expr 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // expr ::= expr EQUAL expr 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // expr ::= expr OR expr 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // expr ::= expr AND expr 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // expr ::= expr GREAT expr 
            {
              Expr RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // expr ::= expr LESS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Less l = new Less(e1, e2);

    RESULT = (Expr) l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // expr ::= expr MINUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Minus p = new Minus(e1, e2);

    RESULT = (Expr) p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // expr ::= expr PLUS expr 
            {
              Expr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e1 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e2 = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Plus p = new Plus(e1, e2);

    RESULT = (Expr) p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // expr ::= read 
            {
              Expr RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Read r = (Read)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = (Expr) r;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // expr ::= functionCall 
            {
              Expr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunctionCall f = (FunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = (Expr) f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // expr ::= STRING 
            {
              Expr RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token s = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    StringExpr e = new StringExpr(s.getLexeme());

    RESULT = (Expr) e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // expr ::= INTEGER 
            {
              Expr RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    IntegerExpr exp = new IntegerExpr(i.getLexeme());

    RESULT = (Expr) exp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // expr ::= ID DOT ID 
            {
              Expr RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (!globalVariables.hasVariable(id1.getLexeme())) {
        errorManager.syntaxFatalError("Variable not found", id1);
    }

    BehaviourVariable  var = (BehaviourVariable) getVariable(id1.getLexeme());

    if (!var.containsVariable(id2.getLexeme())) {
        errorManager.syntaxFatalError("Member of " + id1.getLexeme()  + " not found", id2);
    }

    ProxyBehaviourVariable pbv = new ProxyBehaviourVariable(var);
    pbv.setVariableName(id2.getLexeme());
    //RESULT = (Expr) var.getVariable(id2.getLexeme());
    RESULT = (Expr) pbv;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // expr ::= ID 
            {
              Expr RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (!globalVariables.hasVariable(id.getLexeme()) &&
        !currentVariables.hasVariable(id.getLexeme())) {
        errorManager.syntaxFatalError("Variable not found", id);
    }

    Variable    var = getVariable(id.getLexeme());

    RESULT = (Expr) var;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",45, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // read ::= READ LPAREN RPAREN 
            {
              Read RESULT =null;
		
    Read ret = new Read();

    RESULT = ret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("read",42, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // print ::= PRINT LPAREN expr RPAREN 
            {
              Print RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Print ret = new Print(e);

    RESULT = ret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",41, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // println ::= PRINTLN LPAREN expr RPAREN 
            {
              Println RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Println ret = new Println(e);

    RESULT = ret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("println",40, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // flushVariable ::= ID DOT FLUSH endLine 
            {
              FlushVariable RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
    if (!globalVariables.hasVariable(id.getLexeme()) &&
        !currentVariables.hasVariable(id.getLexeme())) {
        errorManager.syntaxFatalError("Variable not found", id);
    }

    FlushVariable fb = new FlushVariable(getVariable(id.getLexeme()));
    
    RESULT = fb;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("flushVariable",44, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // iterator ::= ID ITER NT$2 sentencesBlock 
            {
              VariableIterator RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (VariableIterator) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesBlock sb = (SentencesBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    VariableIterator    iter = (VariableIterator) stackIterator.pop();

    iter.setSentences(sb);

    (iter.getVariableManager()).delIteratorVariable(iter.getNewvar());

    RESULT = iter;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("iterator",43, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // NT$2 ::= 
            {
              VariableIterator RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

    VariableManager vm = null;

    if (!globalVariables.hasVariable(id.getLexeme()) &&
        !currentVariables.hasVariable(id.getLexeme())) {
        errorManager.syntaxFatalError("Variable not found", id);
    }

    Variable    var = getVariable(id.getLexeme());
    Variable    newvar = null;

    if (var instanceof BehaviourVariable) {
        newvar = new BehaviourVariable(var.getName());
        ((BehaviourVariable)newvar).setVariables(((BehaviourVariable)var).getVariables());
    } else {
        newvar = new SimpleVariable(var.getName());
        Storage     sto = new RAMStorage();
        newvar.addStorage(sto);
    }

    if (currentVariables.hasVariable(id.getLexeme())) {
        vm = currentVariables;
    } else if (globalVariables.hasVariable(id.getLexeme())) {
        vm = globalVariables;
    }

    vm.addIteratorVariable(newvar);

    VariableIterator iter = new VariableIterator(vm, var, newvar);

    stackIterator.push(iter);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$2",90, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // forLoop ::= 
            {
              Sentence RESULT =null;
		
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forLoop",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // forLoop ::= assignSentence 
            {
              Sentence RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentence as = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = as;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forLoop",38, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // forCondition ::= expr 
            {
              Expr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = e;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forCondition",39, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // forPre ::= 
            {
              Sentence RESULT =null;
		
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forPre",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // forPre ::= assignSentence 
            {
              Sentence RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int asright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentence as = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = as;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forPre",37, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // forSentence ::= FOR LPAREN forPre SEMICOLON forCondition SEMICOLON forLoop RPAREN sentencesBlock 
            {
              For RESULT =null;
		int fpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int fpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Sentence fp = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int fcleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fcright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Expr fc = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Sentence fl = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesBlock sb = (SentencesBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    For f = new For(fp, fc, fl);
    f.setBlock(sb);

    RESULT = f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("forSentence",36, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // whileSentence ::= WHILE LPAREN expr RPAREN sentencesBlock 
            {
              While RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesBlock sb = (SentencesBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		

    While w = new While();
    w.setCondition(e);
if (e == null)
    System.out.println("QUE OXTIAS");
    w.setBlock(sb);

    RESULT = w;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("whileSentence",35, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // assignSentence ::= ID DOT ID ASSIG expr 
            {
              Sentence RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (!globalVariables.hasVariable(id1.getLexeme())) {
        errorManager.syntaxFatalError("Variable not found", id1);
    }

    Assig a = new Assig();

    BehaviourVariable  var = (BehaviourVariable) getVariable(id1.getLexeme());

    if (!var.containsVariable(id2.getLexeme())) {
        errorManager.syntaxFatalError("Member of " + id1.getLexeme()  + " not found", id2);
    }

    //var.getVariable(id2.getLexeme());

    ProxyBehaviourVariable pbv = new ProxyBehaviourVariable(var);
    pbv.setVariableName(id2.getLexeme());
    a.setVariable(pbv);
    a.setExpr(e);

    RESULT = (Sentence) a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignSentence",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // assignSentence ::= ID ASSIG expr 
            {
              Sentence RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    if (!globalVariables.hasVariable(id.getLexeme()) &&
        !currentVariables.hasVariable(id.getLexeme())) {
        errorManager.syntaxFatalError("Variable not found", id);
    }
    Assig a = new Assig();

    a.setVariable(getVariable(id.getLexeme()));
    a.setExpr(e);

    RESULT = (Sentence) a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignSentence",32, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // id2VarList ::= ID 
            {
              List RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List    l = new LinkedList();
    l.add(id.getLexeme());

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id2VarList",47, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // id2VarList ::= id2VarList DOT ID 
            {
              List RESULT =null;
		int ivlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ivlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List ivl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List    l = new LinkedList();
    l.addAll(ivl);
    l.add(id.getLexeme());

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id2VarList",47, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // id2Var ::= id2VarList 
            {
              Variable RESULT =null;
		int ivlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ivlright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List ivl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Variable    var = null;
    Iterator    iter = ivl.iterator();

    while (iter.hasNext()) {
        String  tmp = (String) iter.next();
        if (var == null) {
                if (globalVariables.hasVariable(tmp) ||currentVariables.hasVariable(tmp)) {
                    var = getVariable(tmp);
                } else {
                        errorManager.syntaxFatalError("Variable not found");
                }
        } else {
            if (var.containsVariable(tmp)) {
                var = var.getVariable(tmp);
            }
        }
    }

    RESULT = var;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("id2Var",46, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // sentencesBlock ::= LCURLY RCURLY 
            {
              SentencesBlock RESULT =null;
		
    SentencesBlock sb = new SentencesBlock();
    sb.setSentences(new LinkedList());

    RESULT = sb;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencesBlock",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // sentencesBlock ::= LCURLY sentencesList RCURLY 
            {
              SentencesBlock RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List sl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SentencesBlock sb = new SentencesBlock();
    sb.setSentences(sl);

    RESULT = sb;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencesBlock",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // sentencesBlock ::= LCURLY varLocal sentencesList RCURLY 
            {
              SentencesBlock RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List vl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List sl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SentencesBlock sb = new SentencesBlock();
    List    l = new LinkedList();

    l.addAll(vl);
    l.addAll(sl);

    sb.setSentences(l);

    RESULT = sb;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencesBlock",29, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // sentences ::= flushVariable 
            {
              Sentence RESULT =null;
		int fvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FlushVariable fv = (FlushVariable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = (Sentence) fv;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // sentences ::= iterator 
            {
              Sentence RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		VariableIterator i = (VariableIterator)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = (Sentence) i;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // sentences ::= print endLine 
            {
              Sentence RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Print p = (Print)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // sentences ::= println endLine 
            {
              Sentence RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Println p = (Println)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // sentences ::= functionCall endLine 
            {
              Sentence RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunctionCall f = (FunctionCall)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = (Sentence) f;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // sentences ::= forSentence endLine 
            {
              Sentence RESULT =null;
		int fsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		For fs = (For)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = (Sentence) fs;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // sentences ::= whileSentence endLine 
            {
              Sentence RESULT =null;
		int wsleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int wsright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		While ws = (While)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = (Sentence) ws;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // sentences ::= subAssig endLine 
            {
              Sentence RESULT =null;
		int maleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int maright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		SubAssig ma = (SubAssig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = (Sentence) ma;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // sentences ::= addAssig endLine 
            {
              Sentence RESULT =null;
		int paleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AddAssig pa = (AddAssig)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = (Sentence) pa;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // sentences ::= assignSentence endLine 
            {
              Sentence RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Sentence a = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",30, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // sentences ::= sentencesBlock 
            {
              Sentence RESULT =null;
		int sbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sbright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		SentencesBlock sb = (SentencesBlock)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = (Sentence) sb;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentences",30, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // sentencesList ::= sentences 
            {
              List RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List ret = new LinkedList();

    ret.add(s);

    RESULT = ret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencesList",31, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // sentencesList ::= sentencesList sentences 
            {
              List RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List sl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentence s = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List ret = new LinkedList();

    ret.addAll(sl);
    ret.add(s);

    RESULT = ret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sentencesList",31, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // functionBodyList ::= 
            {
              List RESULT =null;
		
    List ret = new LinkedList();

    RESULT = ret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionBodyList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // functionBodyList ::= LCURLY RCURLY 
            {
              List RESULT =null;
		
    List ret = new LinkedList();

    RESULT = ret;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionBodyList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // functionBodyList ::= LCURLY sentencesList RCURLY 
            {
              List RESULT =null;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List sl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = sl;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionBodyList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // functionBodyList ::= LCURLY varLocal sentencesList RCURLY 
            {
              List RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List vl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List sl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    List l = new LinkedList();

    l.addAll(vl);
    l.addAll(sl);

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionBodyList",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // functionOneArg ::= type ID 
            {
              Variable RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Variable var = new ProxyVariable(id.getLexeme());

    currentVariables.addVariable(var);

    RESULT = var;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionOneArg",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // functionArgsList ::= 
            {
              List RESULT =null;
		
    List    l = new LinkedList();

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionArgsList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // functionArgsList ::= functionOneArg 
            {
              List RESULT =null;
		int foaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int foaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable foa = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List l = new LinkedList();

    l.add(foa);

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionArgsList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // functionArgsList ::= functionArgsList COMA functionOneArg 
            {
              List RESULT =null;
		int falleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int falright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List fal = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int foaleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int foaright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Variable foa = (Variable)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List l = new LinkedList();

    l.addAll(fal);
    l.add(foa);

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("functionArgsList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // function ::= ID NT$1 LPAREN functionArgsList RPAREN functionBodyList endLine 
            {
              Function RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Function) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int falleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int falright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List fal = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fblleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fblright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List fbl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SyntaxErrorManager.syntaxInfo("Function: " + id.getLexeme());
    Function func = new Function(id.getLexeme());

    func.addSentences(fbl);
    func.setArguments(fal);

    RESULT = func;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("function",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$1 ::= 
            {
              Function RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    VariableManager vm = new VariableManager(id.getLexeme());
    currentVariables = vm;
    moduleManager.addVariableManager(vm);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",89, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // varLocalId ::= ID ASSIG expr 
            {
              Sentence RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Expr e = (Expr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Assig a = new Assig();
    Variable var = new SimpleVariable(id.getLexeme());
    Storage sto = new RAMStorage();
    var.addStorage(sto);

    a.setVariable(var);
    a.setExpr(e);

    RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varLocalId",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // varLocalId ::= ID 
            {
              Sentence RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Assig a = new Assig();
    Variable var = new SimpleVariable(id.getLexeme());
    Storage sto = new RAMStorage();
    var.addStorage(sto);

    a.setVariable(var);

    RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varLocalId",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // varLocalList ::= varLocalId 
            {
              List RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentence v = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List l = new LinkedList();

    l.add(v);

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varLocalList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // varLocalList ::= varLocalList COMA varLocalId 
            {
              List RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List vl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Sentence v = (Sentence)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List l = new LinkedList();

    l.addAll(vl);
    l.add(v);

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varLocalList",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // varLocal ::= type varLocalList endLine 
            {
              List RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List vl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ListIterator iter = vl.listIterator();

    while (iter.hasNext()) {
        Assig tmp = (Assig) iter.next();

        //tmp.getVariable().setType(t);

        currentVariables.addVariable(tmp.getVariable());
    }

    RESULT = vl;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varLocal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // varLocal ::= modificator type varLocalList endLine 
            {
              List RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List vl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SyntaxErrorManager.syntaxInfo(m + " ");
    ListIterator iter = vl.listIterator();

    while (iter.hasNext()) {
        Assig tmp = (Assig) iter.next();

        //tmp.getVariable().setType(t);
        tmp.getVariable().setTmp(true);

        currentVariables.addVariable(tmp.getVariable());
    }

    RESULT = vl;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varLocal",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // varGlobalId ::= ID ASSIG STRING 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varGlobalId",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // varGlobalId ::= ID ASSIG INTEGER 
            {
              String RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varGlobalId",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // varGlobalId ::= ID 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = id.getLexeme();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varGlobalId",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // varGlobalList ::= varGlobalId 
            {
              List RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List l = new LinkedList();

    l.add(v);

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varGlobalList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // varGlobalList ::= varGlobalList COMA varGlobalId 
            {
              List RESULT =null;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List vl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List l = new LinkedList();

    l.addAll(vl);
    l.add(v);

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varGlobalList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // type ::= VAR 
            {
              Type RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token v = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    VarType type = new VarType("var");

    RESULT = (Type) type;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // modificator ::= TMP 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token i = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i.getLexeme(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("modificator",21, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // varGlobal ::= type varGlobalList endLine 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List vl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ListIterator iter = vl.listIterator();

    while (iter.hasNext()) {
        String tmp = (String) iter.next();

        Variable    var = new ListVariable(tmp);

        globalVariables.addVariable(var);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varGlobal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // varGlobal ::= modificator type varGlobalList endLine 
            {
              Object RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List vl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    SyntaxErrorManager.syntaxInfo(m + " " + t + " ");
    ListIterator iter = vl.listIterator();

    while (iter.hasNext()) {
        String tmp = (String) iter.next();

        Variable    var = new ListVariable(tmp);
        //tmp.setTmp(true);
        globalVariables.addVariable(var);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varGlobal",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // behaviourParam ::= ID 
            {
              BehaviourParam RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    BehaviourParam  bp = new BehaviourParam(id1.getLexeme(), null);

    RESULT = bp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("behaviourParam",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // behaviourParam ::= ID ASSIG STRING 
            {
              BehaviourParam RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token str = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    BehaviourParam  bp = new BehaviourParam(id1.getLexeme(), str.getLexeme());

    RESULT = bp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("behaviourParam",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // behaviourParam ::= ID ASSIG ID 
            {
              BehaviourParam RESULT =null;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int id2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int id2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Token id2 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    BehaviourParam  bp = new BehaviourParam(id1.getLexeme(), id2.getLexeme());

    RESULT = bp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("behaviourParam",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // behaviourParamList ::= 
            {
              List RESULT =null;
		
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("behaviourParamList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // behaviourParamList ::= behaviourParam 
            {
              List RESULT =null;
		int bpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BehaviourParam bp = (BehaviourParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List    l = new LinkedList();

    l.add(bp);

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("behaviourParamList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // behaviourParamList ::= behaviourParamList COMA behaviourParam 
            {
              List RESULT =null;
		int bplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int bplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		List bpl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BehaviourParam bp = (BehaviourParam)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List    l = new LinkedList();

    l.addAll(bpl);
    l.add(bp);

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("behaviourParamList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // dataBehaviour ::= ID DOT ID LPAREN behaviourParamList RPAREN 
            {
              DataBehaviour RESULT =null;
		int id0left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int id0right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Token id0 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int id1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int id1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id1 = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List bpl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    DataBehaviour db = new DataBehaviour(id0.getLexeme(), id1.getLexeme());

    db.setParamList(bpl);

    RESULT = db;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataBehaviour",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dataBehaviour ::= ID LPAREN behaviourParamList RPAREN 
            {
              DataBehaviour RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List bpl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
System.out.println("OXTIASSSSSSSSSSSSS");
System.out.flush();
    DataBehaviour db = new DataBehaviour(id.getLexeme());

    if (bpl != null)
        db.setParamList(bpl);

    RESULT = db;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataBehaviour",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dataParamList ::= varGlobalList 
            {
              List RESULT =null;
		int vglleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vglright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List vgl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = vgl;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataParamList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dataParamList ::= dataParamList varGlobalList 
            {
              List RESULT =null;
		int dplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List dpl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int vglleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int vglright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		List vgl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    List l = new LinkedList();
    l.addAll(dpl);
    l.addAll(vgl);

    RESULT = l;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataParamList",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // varAttr ::= 
            {
              VarAttr RESULT =null;
		
    VarAttr va = new VarAttr();

    RESULT = va;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varAttr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // varAttr ::= LPAREN behaviourParamList RPAREN 
            {
              VarAttr RESULT =null;
		int bplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		List bpl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    VarAttr va = null;

    if (bpl.size() > 0) {
        va = new VarAttr(bpl);
    }
    else {
        va = new VarAttr();
    }

    RESULT = va;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("varAttr",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // dataType ::= VAR ID varAttr LCURLY dataParamList RCURLY dataBehaviour endLine 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Token id = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int valeft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int varight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		VarAttr va = (VarAttr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int dplleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dplright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		List dpl = (List)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dbleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dbright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		DataBehaviour db = (DataBehaviour)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
System.out.println("OXTIASSSSSSSSSSSSS JODERRRRRRRRRRRRRR");
System.out.flush();
    BehaviourVariable bv = new BehaviourVariable(id.getLexeme());
    StorageFactory sf = StorageFactory.getFactory(db);
    if (db.isParamListEmpty())
        bv.addStorage(sf.createStorage(va));
    else
        bv.addStorage(sf.createStorage(va, db.getParamList()));
    {
        Map m = new HashMap();
        Iterator iter = dpl.iterator();

        while (iter.hasNext()) {
            String  tmp = (String) iter.next();
            Variable    var = new SimpleVariable(tmp);
            var.addStorage(new RAMStorage());
System.out.println("Variable added: " + tmp);
            m.put(tmp, var);
        }
        bv.setVariables(m);
    }

    globalVariables.addVariable((Variable)bv);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dataType",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // declaration ::= function 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Function f = (Function)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    functionManager.addFunction(f);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // declaration ::= dataType 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("declaration",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // endLine ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("endLine",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // endLine ::= SEMICOLON 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("endLine",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // body ::= declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // body ::= body declaration 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("body",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // moduleHeader ::= 
            {
              String RESULT =null;
		
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("moduleHeader",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // moduleHeader ::= MODULE ID endLine 
            {
              String RESULT =null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token file = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = file.getLexeme();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("moduleHeader",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // importHeader ::= 
            {
              String RESULT =null;
		
    RESULT = null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importHeader",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // importHeader ::= IMPORT STRING endLine 
            {
              String RESULT =null;
		int fileleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fileright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token file = (Token)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = file.getLexeme();

              CUP$parser$result = parser.getSymbolFactory().newSymbol("importHeader",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // programModule ::= moduleHeader importHeader NT$0 body 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int mhleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int mhright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String mh = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int ihleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ihright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String ih = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("programModule",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // NT$0 ::= 
            {
              Object RESULT =null;
		int mhleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mhright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String mh = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int ihleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ihright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String ih = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;

    if (mh != null)
        moduleManager.setName(mh);
    else 
        moduleManager.setName("main");

    if (ih != null) {
        ModuleManager mm = null;

        mm = ModuleParser.parse(ih);

        moduleManager.addImportedModuleManager(mm);
    }
System.out.println("primera parte");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",88, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // program ::= programModule 
            {
              ModuleManager RESULT =null;
		
    moduleManager.addVariableManager(globalVariables);
    moduleManager.setFunctionManager(functionManager);

    RESULT = moduleManager;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ModuleManager start_val = (ModuleManager)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

